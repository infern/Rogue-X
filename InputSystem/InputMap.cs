//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""I"",
            ""id"": ""ee9d9142-ea0e-4633-b5b7-844ca637d5e6"",
            ""actions"": [
                {
                    ""name"": ""run"",
                    ""type"": ""Value"",
                    ""id"": ""69b6517b-57ae-45c2-96da-81403371442a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""51c8b078-a798-4d6d-b6c4-84151512e529"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""ac0339d1-265b-48d5-9385-3f7e3b5305d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""a81b6838-b81e-40e7-ae95-975486f0fd2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special"",
                    ""type"": ""Button"",
                    ""id"": ""399eaac3-87fa-4cb0-80d7-2fd6d9c570b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""270db51d-6886-4293-aaf2-36c46e0f58fb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ef6112c-3a99-4877-8fef-78336542bb46"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db5c9504-40ac-41dc-8596-ed652b7f9cd4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12ba3eec-bf1e-4fda-be3d-33be6fbb6a44"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9bf59a3-6557-4e7a-b959-68824cc5a7a4"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f641ea3-14f9-4350-b62a-627ae818688f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac3fa572-84d6-4a26-9975-9a09fcceb673"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // I
        m_I = asset.FindActionMap("I", throwIfNotFound: true);
        m_I_run = m_I.FindAction("run", throwIfNotFound: true);
        m_I_jump = m_I.FindAction("jump", throwIfNotFound: true);
        m_I_attack = m_I.FindAction("attack", throwIfNotFound: true);
        m_I_pause = m_I.FindAction("pause", throwIfNotFound: true);
        m_I_special = m_I.FindAction("special", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // I
    private readonly InputActionMap m_I;
    private IIActions m_IActionsCallbackInterface;
    private readonly InputAction m_I_run;
    private readonly InputAction m_I_jump;
    private readonly InputAction m_I_attack;
    private readonly InputAction m_I_pause;
    private readonly InputAction m_I_special;
    public struct IActions
    {
        private @InputMap m_Wrapper;
        public IActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @run => m_Wrapper.m_I_run;
        public InputAction @jump => m_Wrapper.m_I_jump;
        public InputAction @attack => m_Wrapper.m_I_attack;
        public InputAction @pause => m_Wrapper.m_I_pause;
        public InputAction @special => m_Wrapper.m_I_special;
        public InputActionMap Get() { return m_Wrapper.m_I; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IActions set) { return set.Get(); }
        public void SetCallbacks(IIActions instance)
        {
            if (m_Wrapper.m_IActionsCallbackInterface != null)
            {
                @run.started -= m_Wrapper.m_IActionsCallbackInterface.OnRun;
                @run.performed -= m_Wrapper.m_IActionsCallbackInterface.OnRun;
                @run.canceled -= m_Wrapper.m_IActionsCallbackInterface.OnRun;
                @jump.started -= m_Wrapper.m_IActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_IActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_IActionsCallbackInterface.OnJump;
                @attack.started -= m_Wrapper.m_IActionsCallbackInterface.OnAttack;
                @attack.performed -= m_Wrapper.m_IActionsCallbackInterface.OnAttack;
                @attack.canceled -= m_Wrapper.m_IActionsCallbackInterface.OnAttack;
                @pause.started -= m_Wrapper.m_IActionsCallbackInterface.OnPause;
                @pause.performed -= m_Wrapper.m_IActionsCallbackInterface.OnPause;
                @pause.canceled -= m_Wrapper.m_IActionsCallbackInterface.OnPause;
                @special.started -= m_Wrapper.m_IActionsCallbackInterface.OnSpecial;
                @special.performed -= m_Wrapper.m_IActionsCallbackInterface.OnSpecial;
                @special.canceled -= m_Wrapper.m_IActionsCallbackInterface.OnSpecial;
            }
            m_Wrapper.m_IActionsCallbackInterface = instance;
            if (instance != null)
            {
                @run.started += instance.OnRun;
                @run.performed += instance.OnRun;
                @run.canceled += instance.OnRun;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @attack.started += instance.OnAttack;
                @attack.performed += instance.OnAttack;
                @attack.canceled += instance.OnAttack;
                @pause.started += instance.OnPause;
                @pause.performed += instance.OnPause;
                @pause.canceled += instance.OnPause;
                @special.started += instance.OnSpecial;
                @special.performed += instance.OnSpecial;
                @special.canceled += instance.OnSpecial;
            }
        }
    }
    public IActions @I => new IActions(this);
    public interface IIActions
    {
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
    }
}
